------Full Query
WITH ACTIVITY_UNION_BLOCK AS (
    SELECT * FROM (
    SELECT t.id ACTIVITY_ID,
           u.NAME OWNER_NAME,
           t.TASKOWNERROLE__C OWNER_ROLE,
           u.PREVIOUS_ROLE__C OWNER_PREVIOUS_ROLE,
           u.PREVIOUS_ROLE_END_DATE__C OWNER_PREVIOUS_ROLE_END_DATE,
           t.ACTIVITYDATE DATE,
           t.SUBJECT SUBJECT,
           t.type ACTIVITY_TYPE,
           t.WHOID WHOID,
           t.WHATID WHATID,
           CASE WHEN left(WHATID,3)='001' THEN 'ACCOUNT_ID'
               WHEN left(WHATID,3)='006' THEN 'OPPORTUNITY_ID'
               --WHEN WHATID IS NULL THEN 'BLANK'
               ELSE WHATID END WHAT_ID_TYPE,
            CASE WHEN left(WHOID,3)='003' THEN 'CONTACT_ID'
               WHEN left(WHOID,3)='00Q' THEN 'LEAD_ID'
               --WHEN WHATID IS NULL THEN 'BLANK'
               ELSE WHOID END WHO_ID_TYPE,
               CASE WHEN left(WHATID,3)='001' THEN WHATID END as ACCOUNT_ID,
           CASE WHEN left(WHATID,3)='006' THEN WHATID END as OPPORTUNITY_ID,
            CASE WHEN left(WHOID,3)='003' THEN WHOID END as CONTACT_ID,
            CASE   WHEN left(WHOID,3)='00Q' THEN WHOID END AS LEAD_ID
    FROM SALESFORCE.RAW_TESTING.TASK t
             LEFT JOIN SALESFORCE.RAW_TESTING.USER u on t.OWNERID=u.id
             LEFT JOIN SALESFORCE.RAW_TESTING.USERROLE ur on u.USERROLEID=ur.id
    UNION ALL
    SELECT e.id ACTIVITY_ID,
           u.NAME OWNER_NAME,
           ur.NAME OWNER_ROLE,
           u.PREVIOUS_ROLE__C OWNER_PREVIOUS_ROLE,
           u.PREVIOUS_ROLE_END_DATE__C OWNER_PREVIOUS_ROLE_END_DATE,
           e.ACTIVITYDATE DATE,
           e.SUBJECT SUBJECT,
           e.TYPE ACTIVITY_TYPE,
           e.WHOID WHOID,
           e.WHATID WHATID,
           CASE WHEN left(WHATID,3)='001' THEN 'ACCOUNT_ID'
                WHEN left(WHATID,3)='006' THEN 'OPPORTUNITY_ID'
                --WHEN WHATID IS NULL THEN 'BLANK'
                ELSE WHATID END WHAT_ID_TYPE,
                       CASE WHEN left(WHOID,3)='003' THEN 'CONTACT_ID'
               WHEN left(WHOID,3)='00Q' THEN 'LEAD_ID'
               --WHEN WHATID IS NULL THEN 'BLANK'
               ELSE WHOID END WHO_ID_TYPE,
           CASE WHEN left(WHATID,3)='001' THEN WHATID END as ACCOUNT_ID,
           CASE WHEN left(WHATID,3)='006' THEN WHATID END as OPPORTUNITY_ID,
            CASE WHEN left(WHOID,3)='003' THEN WHOID END as CONTACT_ID,
            CASE WHEN left(WHOID,3)='00Q' THEN WHOID END AS LEAD_ID
         FROM SALESFORCE.RAW_TESTING.EVENT e
             LEFT JOIN SALESFORCE.RAW_TESTING.USER u on e.OWNERID=u.id
             LEFT JOIN SALESFORCE.RAW_TESTING.USERROLE ur on u.USERROLEID=ur.id) a
    ),
     --SELECT COUNT(*) FROM ACTIVITY_UNION_BLOCK;
ACTIVITIES AS (
    SELECT ac.*,
           a.id activity_account_id,
           c.id activity_contact_id,
           a.ACCOUNT_SEGMENT__C ACTIVITY_ACCOUNT_SEGMENT,
           a.VERTICAL__C ACTIVITY_ACCOUNT_VERTICAL
    FROM ACTIVITY_UNION_BLOCK ac
    LEFT JOIN prod__us.DBT_ANALYTICS.DATE_DIM d on ac.DATE=d.DATE_KEY
    LEFT JOIN SALESFORCE.RAW_TESTING.CONTACT c on c.id=ac.WHOID
    LEFT JOIN SALESFORCE.RAW_TESTING.ACCOUNT a on a.id=c.ACCOUNTID
    WHERE (OWNER_ROLE='BDA' OR (OWNER_PREVIOUS_ROLE='BDA' and DATE<=OWNER_PREVIOUS_ROLE_END_DATE)
    --Weston added lines below to include BDA and AE activity
                            OR OWNER_ROLE='Account Executive' OR (OWNER_PREVIOUS_ROLE='Account Executive' and DATE <=OWNER_PREVIOUS_ROLE_END_DATE)
                            OR OWNER_ROLE LIKE '%Sales Manager%' OR (OWNER_PREVIOUS_ROLE LIKE '%Sales Manager%' and DATE <=OWNER_PREVIOUS_ROLE_END_DATE)
                            OR OWNER_ROLE='Head of Sales' OR (OWNER_PREVIOUS_ROLE='Head of Sales' and DATE <=OWNER_PREVIOUS_ROLE_END_DATE)
                            OR OWNER_ROLE='BDA Manager' OR (OWNER_PREVIOUS_ROLE='BDA Manager' and DATE <=OWNER_PREVIOUS_ROLE_END_DATE))
    AND ACTIVITY_TYPE IN ('Linkedin','Outbound Call','Outbound Email')
    AND (SUBJECT IS NULL OR SUBJECT not ilike '%<<%' OR SUBJECT not ilike '%>>%')
-----------
 --Activity Date
      AND ac.date>='2021-07-01' AND ac.date<'2022-10-01'--d.FISCAL_YEAR>2020
------------
    ),
DISCOVERY_IDs AS (
    SELECT t.ID DISCOVERY_IDs,
           t.WHOID, ---pretty much all contacts
            CASE WHEN left(WHOID,3)='003' THEN WHOID END as CONTACT_ID,
            CASE WHEN left(WHOID,3)='00Q' THEN WHOID END AS LEAD_ID
    FROM SALESFORCE.RAW_TESTING.event t
    LEFT JOIN SALESFORCE.RAW_TESTING.USER ut on t.OWNERID=ut.ID
    LEFT JOIN SALESFORCE.RAW_TESTING.USERROLE urt on urt.id=ut.USERROLEID
    WHERE (t.SUBJECT ilike '%Discovery call%' OR t.SUBJECT ilike '%Conference Meeting%' OR t.SUBJECT ilike '%In-Person Meeting%')
    --Weston added or statements beyond account executive here
    AND (urt.NAME='BDA' or urt.NAME ilike '%account executive%' or urt.name LIKE '%Sales Manager%' 
         or urt.NAME = 'Head of Sales' or urt.NAME = 'BDA Manager')
   
---------------
    --Discovery Date    
    AND t.CREATEDDATE>='2021-07-01' AND t.createddate < '2022-10-01'
----------------    
    ),
 LEADS AS (
SELECT l.CREATEDDATE,
       al.ACCOUNT_SEGMENT__C LEAD_ACCOUNT_SEGMENT1,
       al.VERTICAL__C LEAD_ACCOUNT_VERTICAL,
       l.MARKETING_QUALIFIED_DATE__C,
       CASE
        WHEN l.ANNUAL_SALES_THROUGH_WEBSITE__C='$5M-20M' THEN 10000000 --10M
        WHEN l.ANNUAL_SALES_THROUGH_WEBSITE__C='>$75M' THEN 100000000 --100M use > or >= for inclusion here
        WHEN l.ANNUAL_SALES_THROUGH_WEBSITE__C='$20M-75M' THEN 50000000 --50M
        WHEN l.ANNUAL_SALES_THROUGH_WEBSITE__C IS NULL THEN NULL
        WHEN l.ANNUAL_SALES_THROUGH_WEBSITE__C='>$100M' THEN 105000000 --105M
        WHEN l.ANNUAL_SALES_THROUGH_WEBSITE__C='$2M-5M' THEN 3000000 --3M
        WHEN l.ANNUAL_SALES_THROUGH_WEBSITE__C='$1M-2M' THEN 2000000 --2M
        WHEN l.ANNUAL_SALES_THROUGH_WEBSITE__C='$10M-25M' THEN 15000000 --15M
        WHEN l.ANNUAL_SALES_THROUGH_WEBSITE__C='$5M-10M' THEN 7500000 --7.5M
        WHEN l.ANNUAL_SALES_THROUGH_WEBSITE__C='$25M-100M' THEN 75000000 --75M
        ELSE 0 END AS MAPPED_LEAD_TAS,
       CASE WHEN l.LEAD_ELIGIBILITY_STATUS__C='Eligible' THEN l.id END AS ELIGIBLE_LEAD_IDs,
       CASE WHEN l.PASSED_THROUGH_MQL_STATUS__C=TRUE THEN l.id END AS MQL_LEAD_ID,
       CASE WHEN url.NAME='BDA' THEN l.id END AS SAL_LEAD_ID,
       CASE WHEN c.PASSED_THROUGH_SQL_STATUS__C=TRUE THEN l.id END AS SQL_LEAD_ID,
       --May want to move discoery id and opp conversion to the next opp one.....
       d.DISCOVERY_IDs DISCOVERY_IDS_LEAD,
       CASE WHEN v.OPPORTUNITY_ID IS NOT NULL THEN l.id END TOTAL_CONVERTED_OPP_LEAD_ID, --may be better way to link this (revisit)
       CASE WHEN v.OPPORTUNITY_ID IS NOT NULL THEN /*l.id*/ v.OPPORTUNITY_ID END TOTAL_CONVERTED_OPP_OPP_ID, --may be better way to link this (revisit)
       CASE WHEN c.PASSED_THROUGH_SQL_STATUS__C=TRUE AND vao.OPPORTUNITY_ID /*AND c.PASSED_THROUGH_SQL_STATUS__C=TRUE*/ IS NOT NULL
        AND (l.EMAIL not ilike '%yahoo%' OR l.EMAIL not ilike '%aol%' OR l.EMAIL not ilike '%gmail%') THEN l.id END TOTAL_CONVERTED_ACC_OPP_LEAD_ID,
       v.OPPORTUNITY_ID as OPPORTUNITY_ID_LEAD_OPP,
       --vao.OPPORTUNITY_ID AS OPPORTUNITY_ID_LEAD_ACCOUNT,
       CASE WHEN c.PASSED_THROUGH_SQL_STATUS__C=TRUE AND vao.OPPORTUNITY_ID /*AND c.PASSED_THROUGH_SQL_STATUS__C=TRUE*/ IS NOT NULL
        AND (l.EMAIL not ilike '%yahoo%' AND l.EMAIL not ilike '%aol%' AND l.EMAIL not ilike '%gmail%') THEN vao.OPPORTUNITY_ID END AS TOTAL_CONVERTED_ACC_OPP_ID,
       l.LEADSOURCE,
       lm.LEAD_SOURCE_MAPPED,
       vao.OPPORTUNITY_ID AS OPPORTUNITY_ID_LEAD_ACCOUNT
    FROM SALESFORCE.RAW_TESTING.LEAD l
    LEFT JOIN SALESFORCE.RAW_TESTING.CONTACT c on l.CONVERTEDCONTACTID=c.id
    LEFT JOIN SALESFORCE.RAW_TESTING.OPPORTUNITYCONTACTROLE oc on l.CONVERTEDCONTACTID=oc.CONTACTID
    LEFT JOIN PROD__WORKSPACE__US.SCRATCH_T_REVENUEOPS.V_OPEN_SALES_OPP_REV_GMV_PERFORMANCE v ON v.OPPORTUNITY_ID=oc.OPPORTUNITYID and v.OPPORTUNITY_SALES_FLAG=TRUE
    --LEFT JOIN SALESFORCE.RAW_TESTING.OPPORTUNITY o on oc.OPPORTUNITYID=o.id
    LEFT JOIN PROD__WORKSPACE__US.SCRATCH_T_REVENUEOPS.LEAD_SOURCE_MAPPING_DIM lm on c.LEADSOURCE=lm.LEADSOURCE
    LEFT JOIN SALESFORCE.RAW_TESTING.ACCOUNT al on l.CONVERTEDACCOUNTID=al.id
    LEFT JOIN PROD__WORKSPACE__US.SCRATCH_T_REVENUEOPS.V_OPEN_SALES_OPP_REV_GMV_PERFORMANCE vao ON vao.ACCOUNT_ID=al.ID
                and vao.OPPORTUNITY_SALES_FLAG=TRUE and vao.EST_GMV<50000000
    LEFT JOIN SALESFORCE.RAW_TESTING.USER ul on l.OWNERID=ul.ID
    LEFT JOIN SALESFORCE.RAW_TESTING.USERROLE url on url.id=ul.USERROLEID
    LEFT JOIN DISCOVERY_IDs d on c.id=d.WHOID
    WHERE l.AFFIRM_BUSINESS_UNIT__C='US' AND (l.LEADSOURCE IS NULL OR l.LEADSOURCE not ilike '%paybright%')
    AND l.CURRENT_PURCHASE_PATH__C ilike 'sales' and al.SELF_SERVICE__C=false--MSS Filter?
    AND l.EMAIL not ilike '%@affirm.com'
--------------
--Lead Update Date
    AND l.CREATEDDATE>='2021-07-01' AND l.CREATEDDATE <'2022-10-01'
--------------
)
     ,
DISCO_CALLS AS (
    --probably want to use activity date
SELECT a.ACCOUNT_SEGMENT__C DISCO_ACCOUNT_SEGMENT,
       a.VERTICAL__C DISCO_ACCOUNT_VERTICAL,
       a.AMOUNT__C DISCO_ACCOUNT_TAS,
        t.ID DISCOVERY_IDs,
         t.CREATEDDATE DISCO_CREATE_DATE,
         v.OPPORTUNITY_ID DISCO_CREATED_OPP_ID,
         v.CREATED_DATE,
         --added two lines here for AE and BDA tracibility
         OWNER_NAME,
         OWNER_ROLE,
       CASE WHEN ac.ACTIVITY_ID is not null then DISCOVERY_IDs END AS ACTIVITY_DISCO_IDS,
       CASE WHEN ac.ACTIVITY_ID is not null then ac.activity_account_id END AS ACTIVITY_DISCO_ACCOUNT_IDS,
       CASE WHEN ac.ACTIVITY_ID is not null then ac.activity_contact_id END AS ACTIVITY_DISCO_CONTACT_IDS
    FROM SALESFORCE.RAW_TESTING.ACCOUNT a
    LEFT JOIN SALESFORCE.RAW_TESTING.event t on a.id=t.ACCOUNTID
    LEFT JOIN SALESFORCE.RAW_TESTING.USER ut on t.OWNERID=ut.ID
    LEFT JOIN SALESFORCE.RAW_TESTING.USERROLE urt on urt.id=ut.USERROLEID
    LEFT JOIN SALESFORCE.RAW_TESTING.CONTACT c on t.WHOID=c.id
    LEFT JOIN ACTIVITIES ac on c.id=ac.activity_contact_id
    LEFT JOIN PROD__WORKSPACE__US.SCRATCH_T_REVENUEOPS.V_OPEN_SALES_OPP_REV_GMV_PERFORMANCE v ON v.ACCOUNT_ID=a.id and v.CREATED_DATE>t.CREATEDDATE AND v.CREATED_DATE<DATEADD(month,6,t.CREATEDDATE) and v.OPPORTUNITY_SALES_FLAG=TRUE
    WHERE (t.SUBJECT ilike '%Discovery call%' OR t.SUBJECT ilike '%Conference Meeting%' OR t.SUBJECT ilike '%In-Person Meeting%')
---Weston added here to account for other Sales POC's
    AND (
        (urt.NAME='BDA' or urt.NAME ilike '%account executive%') 
         OR (ut.PREVIOUS_ROLE__C='Account Executive' AND t.CREATEDDATE<ut.PREVIOUS_ROLE_END_DATE__C)
         OR (urt.NAME LIKE '%Sales Manager%')
         OR (ut.PREVIOUS_ROLE__C LIKE '%Sales Manager' AND t.CREATEDDATE<ut.PREVIOUS_ROLE_END_DATE__C)
         OR (urt.NAME = 'Account Executive')
         OR (urt.NAME = 'Sales Manager')
         OR (ut.PREVIOUS_ROLE__C='Sales Manager' AND t.CREATEDDATE<ut.PREVIOUS_ROLE_END_DATE__C)
         OR (urt.NAME = 'Head of Sales')
         OR (ut.PREVIOUS_ROLE__C='Head of Sales' AND t.CREATEDDATE<ut.PREVIOUS_ROLE_END_DATE__C)
         OR (urt.NAME = 'BDA Manager')
         OR (ut.PREVIOUS_ROLE__C='BDA Manager' AND t.CREATEDDATE<ut.PREVIOUS_ROLE_END_DATE__C)
         )    
------------------------
--Disco Call Created Date
  AND t.CREATEDDATE>='2021-07-01' AND t.CREATEDDATE < '2022-10-01'
------------------------
    QUALIFY ROW_NUMBER() OVER (PARTITION BY t.id,v.OPPORTUNITY_ID ORDER BY c.CREATEDDATE ASC)=1
),
OPPS AS (
    --probably want to update to closed date?
    SELECT v.ACCOUNT_ID OPP_ACCOUNT_ID,
           v.VERTICAL OPP_ACCOUNT_VERTICAL,
           v.ACCOUNT_SEGMENT OPP_ACCOUNT_SEGMENT,
           v.ACCOUNT_TAS OPP_ACCOUNT_TAS,
           v.OPPORTUNITY_ID CREATED_OPPS,
           v.CLOSE_DATE,
           CASE WHEN v.OPPORTUNITY_SUPPORTER_ROLE='BDA' OR (v.opportunity_supporter_previous_role='BDA' and v.CLOSE_DATE< opportunity_supporter_previous_role_end_date)
           THEN v.OPPORTUNITY_ID END AS BDA_SUPPORTED_OPP,
           CASE WHEN ac.ACTIVITY_ID IS NOT NULL THEN v.OPPORTUNITY_ID END as ACTIVITY_CREATED_OPPS,
           CASE WHEN v.STAGE ILIKE '%won%' THEN v.OPPORTUNITY_ID END as WON_OPPS_ID,
           CASE WHEN v.STAGE ILIKE '%lost%' THEN v.OPPORTUNITY_ID END as LOST_OPPS_ID,
           CASE WHEN v.STAGE NOT ILIKE '%closed%' THEN v.OPPORTUNITY_ID END as OPEN_OPPS_ID,
           CASE WHEN v.OPPORTUNITY_LAUNCH_DATE IS NOT NULL THEN v.OPPORTUNITY_ID END as LAUNCHED_OPP_IDS,
           CASE WHEN v.OPPORTUNITY_CAPTURE_DATE IS NOT NULL THEN v.OPPORTUNITY_ID END as CAPTURED_OPP_IDS
    FROM PROD__WORKSPACE__US.SCRATCH_T_REVENUEOPS.V_OPEN_SALES_OPP_REV_GMV_PERFORMANCE v
    LEFT JOIN SALESFORCE.RAW_TESTING.ACCOUNT a on v.ACCOUNT_ID=a.id
    LEFT JOIN SALESFORCE.RAW_TESTING.CONTACT c on c.ACCOUNTID=a.id
    LEFT JOIN  ACTIVITIES ac on ac.WHOID=c.id
    WHERE v.OPPORTUNITY_SALES_FLAG=TRUE AND
---------------------
    --opportunity created date
    v.CREATED_DATE>='2021-07-01' AND v.CREATED_DATE < '2022-10-01'
---------------------
    )
     , COMBINED_TABLE AS (
SELECT coalesce(o.OPP_ACCOUNT_TAS,d.DISCO_ACCOUNT_TAS,l.MAPPED_LEAD_TAS) TAS_FOR_SEGMENT,
       CASE WHEN TAS_FOR_SEGMENT<5000000 THEN 'MSS'
        WHEN TAS_FOR_SEGMENT<100000000 THEN 'SMB'
        WHEN TAS_FOR_SEGMENT>100000000 THEN 'ENT'
       ELSE 'OTHER' END SEGMENT_BASED_TAS,
       COALESCE(OPP_ACCOUNT_SEGMENT, DISCO_ACCOUNT_SEGMENT ,l.LEAD_ACCOUNT_SEGMENT1,lao.LEAD_ACCOUNT_SEGMENT1, ACTIVITY_ACCOUNT_SEGMENT) ACCOUNT_BASED_SEGMENT_RAW,
       CASE WHEN ACCOUNT_BASED_SEGMENT_RAW='Self-Service' THEN 'SMB' ELSE ACCOUNT_BASED_SEGMENT_RAW END ACCOUNT_BASED_SEGMENT,
       COALESCE(OPP_ACCOUNT_VERTICAL, DISCO_ACCOUNT_VERTICAL ,l.LEAD_ACCOUNT_VERTICAL,lao.LEAD_ACCOUNT_VERTICAL, ACTIVITY_ACCOUNT_VERTICAL) ACCOUNT_BASED_VERTICAL,
       o.*,
       d.*,
       l.*,
       a.ACTIVITY_ID,
       a.activity_account_id,
       a.activity_contact_id,
      a.ACTIVITY_ACCOUNT_SEGMENT,
     --a.ACTIVITY_DISCO_ACCOUNT_IDS,
       --a.ACTIVITY_DISCO_CONTACT_IDS,
       lao.TOTAL_CONVERTED_ACC_OPP_ID as TOTAL_CONVERTED_ACC_OPP_LEAD_OPP_IDS
FROM OPPS o
FULL OUTER JOIN DISCO_CALLS d on o.CREATED_OPPS=d.DISCO_CREATED_OPP_ID
FULL OUTER JOIN LEADS l on o.CREATED_OPPS=l.OPPORTUNITY_ID_LEAD_OPP
FULL OUTER JOIN LEADS lao on o.CREATED_OPPS=lao.OPPORTUNITY_ID_LEAD_ACCOUNT
FULL OUTER JOIN ACTIVITIES a on o.OPP_ACCOUNT_ID=a.activity_account_id
WHERE ACCOUNT_BASED_SEGMENT_RAW IN ('SMB', 'Key', 'Self-Service','Enterprise')
)

SELECT WON_OPPS_ID, ELIGIBLE_LEAD_IDS, SEGMENT_BASED_TAS, OPP_ACCOUNT_TAS, CLOSE_DATE
FROM COMBINED_TABLE
WHERE WON_OPPS_ID IS NOT NULL AND ELIGIBLE_LEAD_IDS is NOT NULL
GROUP BY 1,2,3,4,5
