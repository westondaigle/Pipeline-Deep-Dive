----Andrew query

WITH DISCOVERY_IDs AS (
    SELECT t.ID DISCOVERY_IDs,
           t.WHOID
    FROM SALESFORCE.RAW_TESTING.event t
    LEFT JOIN SALESFORCE.RAW_TESTING.USER ut on t.OWNERID=ut.ID
    LEFT JOIN SALESFORCE.RAW_TESTING.USERROLE urt on urt.id=ut.USERROLEID
    WHERE (t.SUBJECT ilike '%Discovery call%' OR t.SUBJECT ilike '%Conference Meeting%' OR t.SUBJECT ilike '%In-Person Meeting%')
    AND (urt.NAME='BDA' or urt.NAME ilike '%account executive%')
    AND t.CREATEDDATE>='2021-07-01'
    ),
 LEADS AS (
SELECT l.CREATEDDATE,
       l.MARKETING_QUALIFIED_DATE__C,
       l.id LEAD_ID,
       CASE WHEN l.LEAD_ELIGIBILITY_STATUS__C='Eligible' THEN l.id END AS ELIGIBLE_LEAD_ID,
       CASE WHEN l.PASSED_THROUGH_MQL_STATUS__C=TRUE THEN l.id END AS MQL_LEAD_ID,
       --Add Total SAL
       CASE WHEN url.NAME='BDA' THEN l.id END AS SAL_LEAD_ID,
       CASE WHEN c.PASSED_THROUGH_SQL_STATUS__C=TRUE THEN l.id END AS SQL_LEAD_ID,
       CASE WHEN l.PASSED_THROUGH_SQL_STATUS__C=TRUE AND l.CONVERTEDCONTACTID IS NOT NULL THEN l.id END TOTAL_CONVERTED_CONTACTS_LEAD_ID,--Rename this to somethjing else
       --add total converted discovery call
       --May want to move discoery id and opp conversion to the next opp one.....
       d.DISCOVERY_IDs DISCOVERY_IDS_LEAD,
       --update that
       CASE WHEN v.OPPORTUNITY_ID IS NOT NULL THEN l.id END TOTAL_CONVERTED_OPP_LEAD_ID, --may be better way to link this (revisit)
       v.OPPORTUNITY_ID as OPPORTUNITY_ID_LEAD,
       l.LEADSOURCE,
       lm.LEAD_SOURCE_MAPPED
FROM SALESFORCE.RAW_TESTING.LEAD l
LEFT JOIN SALESFORCE.RAW_TESTING.CONTACT c on l.CONVERTEDCONTACTID=c.id
LEFT JOIN SALESFORCE.RAW_TESTING.OPPORTUNITYCONTACTROLE oc on l.CONVERTEDCONTACTID=oc.CONTACTID
LEFT JOIN PROD__WORKSPACE__US.SCRATCH_T_REVENUEOPS.V_OPEN_SALES_OPP_REV_GMV_PERFORMANCE v ON v.OPPORTUNITY_ID=oc.OPPORTUNITYID and v.OPPORTUNITY_SALES_FLAG=TRUE
--LEFT JOIN SALESFORCE.RAW_TESTING.OPPORTUNITY o on oc.OPPORTUNITYID=o.id
LEFT JOIN PROD__WORKSPACE__US.SCRATCH_T_REVENUEOPS.LEAD_SOURCE_MAPPING_DIM lm on c.LEADSOURCE=lm.LEADSOURCE
LEFT JOIN SALESFORCE.RAW_TESTING.ACCOUNT al on l.CONVERTEDACCOUNTID=al.id
LEFT JOIN SALESFORCE.RAW_TESTING.USER ul on l.OWNERID=ul.ID
LEFT JOIN SALESFORCE.RAW_TESTING.USERROLE url on url.id=ul.USERROLEID
LEFT JOIN DISCOVERY_IDs d on c.id=d.WHOID
WHERE l.AFFIRM_BUSINESS_UNIT__C='US' AND (l.LEADSOURCE IS NULL OR l.LEADSOURCE not ilike '%paybright%')
AND l.CURRENT_PURCHASE_PATH__C ilike 'sales' and al.SELF_SERVICE__C=false--MSS Filter?
AND l.EMAIL not ilike '%@affirm.com'
AND l.CREATEDDATE>='2021-07-01'
),
DISCO_CALLS AS (
    --probably want to use activity date
SELECT   t.ID DISCOVERY_IDs,
         t.CREATEDDATE DISCO_CREATE_DATE,
         v.OPPORTUNITY_ID DISCO_CREATED_OPP_ID,
         v.CREATED_DATE
FROM SALESFORCE.RAW_TESTING.ACCOUNT a
LEFT JOIN SALESFORCE.RAW_TESTING.event t on a.id=t.ACCOUNTID
LEFT JOIN SALESFORCE.RAW_TESTING.USER ut on t.OWNERID=ut.ID
LEFT JOIN SALESFORCE.RAW_TESTING.USERROLE urt on urt.id=ut.USERROLEID
LEFT JOIN SALESFORCE.RAW_TESTING.CONTACT c on t.WHOID=c.id
LEFT JOIN PROD__WORKSPACE__US.SCRATCH_T_REVENUEOPS.V_OPEN_SALES_OPP_REV_GMV_PERFORMANCE v ON v.ACCOUNT_ID=a.id and v.CREATED_DATE>t.CREATEDDATE AND v.CREATED_DATE<DATEADD(month,6,t.CREATEDDATE) and v.OPPORTUNITY_SALES_FLAG=TRUE
WHERE (t.SUBJECT ilike '%Discovery call%' OR t.SUBJECT ilike '%Conference Meeting%' OR t.SUBJECT ilike '%In-Person Meeting%')
AND (urt.NAME='BDA' or urt.NAME ilike '%account executive%')
AND t.CREATEDDATE>='2021-07-01'
QUALIFY ROW_NUMBER() OVER (PARTITION BY t.id,v.OPPORTUNITY_ID ORDER BY c.CREATEDDATE ASC)=1
ORDER BY v.OPPORTUNITY_ID),
OPPS AS (
    --probably want to update to closed date?
    SELECT v.OPPORTUNITY_ID CREATED_OPPS,
           CASE WHEN v.STAGE ILIKE '%won%' THEN v.OPPORTUNITY_ID END as WON_OPPS_ID,
           CASE WHEN v.STAGE ILIKE '%lost%' THEN v.OPPORTUNITY_ID END as LOST_OPPS_ID,
           CASE WHEN v.STAGE NOT ILIKE '%closed%' THEN v.OPPORTUNITY_ID END as OPEN_OPPS_ID,
           CASE WHEN v.OPPORTUNITY_LAUNCH_DATE IS NOT NULL THEN v.OPPORTUNITY_ID END as LAUNCHED_OPP_IDS,
           CASE WHEN v.OPPORTUNITY_CAPTURE_DATE IS NOT NULL THEN v.OPPORTUNITY_ID END as CAPTURED_OPP_IDS
    FROM PROD__WORKSPACE__US.SCRATCH_T_REVENUEOPS.V_OPEN_SALES_OPP_REV_GMV_PERFORMANCE v
    WHERE v.OPPORTUNITY_SALES_FLAG=TRUE AND v.CREATED_DATE>='2021-07-01'
), COMBINED_TABLE AS (
SELECT *
FROM OPPS o
FULL OUTER JOIN DISCO_CALLS d on o.CREATED_OPPS=d.DISCO_CREATED_OPP_ID
FULL OUTER JOIN LEADS l on o.CREATED_OPPS=l.OPPORTUNITY_ID_LEAD),
AGG_TABLE AS (
 SELECT
     COUNT(DISTINCT c.LEAD_ID) ALL_LEADS,
     COUNT(DISTINCT c.ELIGIBLE_LEAD_ID) ALL_ELIGIBLE_LEADS,
     COUNT(DISTINCT c.MQL_LEAD_ID) ALL_MQL_LEADS,
     COUNT(DISTINCT c.SAL_LEAD_ID) ALL_SAL_LEADS,
     COUNT(DISTINCT c.SQL_LEAD_ID) ALL_SQL_LEADS,
     COUNT(DISTINCT c.TOTAL_CONVERTED_CONTACTS_LEAD_ID) ALL_CONVERTED_LEADS,
     COUNT(DISTINCT c.DISCOVERY_IDS_LEAD) ALL_LEADS_TO_DISCO_CALL,
     COUNT(DISTINCT c.TOTAL_CONVERTED_OPP_LEAD_ID) ALL_LEADS_TO_OPPS_ARTIFICIALLY_LOW,
     COUNT(DISTINCT DISCOVERY_IDs) ALL_DISCOs,
     ALL_DISCOs-ALL_LEADS_TO_DISCO_CALL OUTBOUND_DISCOs,
     COUNT(DISTINCT DISCO_CREATED_OPP_ID) ALL_DISCO_TO_OPPS,
     COUNT(DISTINCT CREATED_OPPS) ALL_CREATED_OPPS,
     COUNT(DISTINCT OPEN_OPPS_ID) ALL_OPEN_OPPS,
     COUNT(DISTINCT WON_OPPS_ID) ALL_WON_OPPS,
     COUNT(DISTINCT LOST_OPPS_ID) ALL_LOST_OPPS,
     COUNT(DISTINCT LAUNCHED_OPP_IDS) ALL_LAUNCHED_OPPS ,
     COUNT(DISTINCT CAPTURED_OPP_IDS) ALL_CAPTURED_OPPS
 FROM COMBINED_TABLE c)
SELECT *
FROM AGG_TABLE;
